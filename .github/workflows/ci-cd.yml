name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        # Add your test commands here
        python -m pytest tests/ || echo "No tests found, skipping..."

    - name: Run linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed"

  build-and-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/california-api:latest

  deploy:
    needs: build-and-publish
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull Docker image
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/california-api:latest

    - name: Stop and remove existing container
      run: |
        docker stop california-api-container || true
        docker rm california-api-container || true

    - name: Deploy container
      run: |
        docker run -d \
          --name california-api-container \
          -p 5000:8080 \
          --restart unless-stopped \
          ${{ secrets.DOCKER_USERNAME }}/california-api:latest

    - name: Verify deployment
      run: |
        echo "Waiting for container to start..."
        sleep 30
        
        echo "Checking container status..."
        docker ps | grep california-api-container
        
        echo "Checking container logs..."
        docker logs california-api-container
        
        echo "Testing connectivity with retries..."
        for i in {1..10}; do
          if curl -f http://localhost:5000/; then
            echo "? Application is responding!"
            echo "?? Access your app at: http://localhost:5000"
            exit 0
          fi
          echo "? Attempt $i failed, retrying in 10 seconds..."
          sleep 10
        done
        
        echo "? Application failed to respond after 10 attempts"
        echo "?? Container logs:"
        docker logs california-api-container
        exit 1

    - name: Post Login to DockerHub
      if: always()
      run: docker logout

    - name: Complete job
      run: |
        echo "?? Deployment completed successfully!"
        echo "?? Your California API is now running at: http://localhost:5000"
        echo "?? Check container status: docker ps | grep california-api"
        echo "?? View logs: docker logs california-api-container"
