name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run tests
      run: |
        pytest

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Enable BuildKit for better performance
          export DOCKER_BUILDKIT=1
          
          # Try to pull previous image for layer caching
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest || true
          
          # Build with cache optimization
          docker build \
            --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # FIXED: Use GITHUB_OUTPUT instead of set-output
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
  Continuous-Deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'
      
      - name: Check Docker status and connectivity
        run: |
          echo "=== Docker System Status ==="
          docker system df
          echo "=== Current Images ==="
          docker images | head -10
          echo "=== Testing ECR connectivity ==="
          aws ecr describe-repositories --region ${{ secrets.AWS_REGION }} --max-items 1 || echo "ECR connectivity issue"
      
      - name: Check for existing image
        id: check-image
        run: |
          IMAGE_NAME="${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          echo "Checking for image: $IMAGE_NAME"
          
          if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$IMAGE_NAME"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Image already exists locally"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Need to pull image"
          fi
      
      - name: Pull latest images with timeout
        if: steps.check-image.outputs.exists == 'false'
        run: |
          echo "üîÑ Pulling latest image with 8-minute timeout..."
          IMAGE_NAME="${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          
          # Add timeout to prevent hanging
          timeout 480 docker pull $IMAGE_NAME || {
            echo "‚ùå Docker pull failed or timed out after 8 minutes"
            echo "Checking disk space..."
            df -h
            echo "Checking Docker daemon..."
            docker version
            exit 1
          }
          echo "‚úÖ Image pulled successfully"
         
      - name: Stop and remove container if running
        run: |
          echo "üõë Managing existing container..."
          if docker ps -a --format "{{.Names}}" | grep -q "californiaecr-api"; then
            echo "Stopping existing container..."
            docker stop californiaecr-api || true
            echo "Removing existing container..."
            docker rm californiaecr-api || true
            echo "‚úÖ Existing container removed"
          else
            echo "‚úÖ No existing container found"
          fi
       
      - name: Run Docker Image to serve users
        run: |
          echo "üöÄ Starting new container..."
          docker run -d \
            -p 8080:8080 \
            --name=californiaecr-api \
            --memory=2g \
            --cpus=2 \
            --restart=unless-stopped \
            --health-cmd="curl -f http://localhost:8080/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
          
          echo "‚úÖ Container started successfully"

      - name: Verify deployment quickly
        run: |
          echo "‚è≥ Quick deployment verification..."
          
          # Wait only 30 seconds for container to start
          sleep 30
          
          # Check if container is running
          if ! docker ps --format "{{.Names}}" | grep -q "californiaecr-api"; then
            echo "‚ùå Container not running after 30 seconds"
            docker logs californiaecr-api
            exit 1
          fi
          
          # Quick health check (only 5 attempts = 25 seconds max)
          for i in {1..5}; do
            if curl -f -s -m 5 http://localhost:8080/ > /dev/null; then
              echo "‚úÖ Service is healthy!"
              exit 0
            else
              echo "Health check $i/5..."
              sleep 5
            fi
          done
          
          echo "‚ö†Ô∏è Service may still be starting up, but container is running"
          docker ps --filter "name=californiaecr-api"

      - name: Clean previous images and containers
        run: |
          echo "üßπ Quick cleanup..."
          # Only remove dangling images (much faster)
          docker image prune -f
          # Remove stopped containers
          docker container prune -f
          echo "‚úÖ Cleanup completed"

          